apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "galaxy.fullname" . }}-web
  labels:
    app.kubernetes.io/name: {{ include "galaxy.name" . }}
    helm.sh/chart: {{ include "galaxy.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.webHandlers.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "galaxy.fullname" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "galaxy.fullname" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        component: galaxy-web-handler
      annotations:
        checksum/galaxy_conf: {{ include (print $.Template.BasePath "/configs-galaxy.yaml") . | sha256sum }}
    spec:
      securityContext:
        fsGroup: 101
      initContainers:
        - name: {{ .Chart.Name }}-init-postgres
          image: alpine:3.7
          command: ['sh', '-c', 'chown 101:101 {{.Values.persistence.mountPath}}; until nc -z -w3 {{ template "galaxy-postgresql.fullname" $ }} 5432; do echo waiting for galaxy-postgres service; sleep 1; done;']
          volumeMounts:
            - name: galaxy-data
              mountPath: {{.Values.persistence.mountPath}}
        - name: {{ .Chart.Name }}-init-mounts
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ['sh', '-c', {{ include "galaxy.init-container-commands" . | squote }}]
          volumeMounts:
            {{- range $key,$entry := .Values.configs }}
            - name: galaxy-conf-files
              mountPath: /galaxy/server/config/{{ $key }}
              subPath: {{ $key }}
            {{- end }}
            - name: galaxy-data
              mountPath: {{.Values.persistence.mountPath}}
            - name: galaxy-data
              mountPath: /galaxy/server/config/mutable/
              subPath: config
        - name: {{ $.Chart.Name }}-initscripts
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          command: ['sh', '-c', 'echo "Starting to run init scripts"
          {{- range $key, $entry := .Values.initScripts -}}
          {{- if $entry.applyToWeb -}}
           && echo "Running {{$key}}.sh" && sh /galaxy/initscripts/{{$key}}.sh
          {{- end -}}
          {{- end -}}
          ']
          volumeMounts:
            {{- range $key, $entry := .Values.initScripts -}}
            {{- if $entry.applyToWeb }}
            - name: galaxy-initscripts-{{$key}}
              mountPath: /galaxy/initscripts
              subPath: {{$key}}.sh
            - name: galaxy-data
              mountPath: {{ $.Values.persistence.mountPath }}
            {{- end }}
            {{- end }}
        {{- range $key, $entry := .Values.initContainers -}}
        {{- if $entry.applyToWeb }}
        - name: {{ $.Chart.Name}}-{{ $key }}
          image: {{ tpl $entry.image $ }}
          command: {{ tpl $entry.command $ }}
          volumeMounts:
            {{- tpl ($entry.volumeMounts | toYaml) $ | nindent 12 }}
        {{- end }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}-web
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: galaxy-http
              containerPort: 8080
              protocol: TCP
          env:
{{- if .Values.extraEnv }}
{{ tpl (toYaml .Values.extraEnv) . | indent 12 }}
{{- end }}
            - name: GALAXY_CONFIG_DATABASE_CONNECTION
              value: postgresql://{{ .Values.postgresql.galaxyDatabaseUser }}:$(GALAXY_DB_USER_PASSWORD)@{{ template "galaxy-postgresql.fullname" . }}/galaxy
          command: ["/galaxy/server/.venv/bin/uwsgi"]
          args: ["--yaml", "/galaxy/server/config/galaxy.yml"]
          readinessProbe:
            httpGet:
              path: {{ template "galaxy.add_trailing_slash" .Values.ingress.path }}
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: {{ template "galaxy.add_trailing_slash" .Values.ingress.path }}
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 60
            failureThreshold: 10
          volumeMounts:
            {{- range $key,$entry := .Values.configs }}
            - name: galaxy-conf-files
              mountPath: /galaxy/server/config/{{ $key }}
              subPath: {{ $key }}
            {{- end }}
            {{- range $key,$entry := .Values.jobs.rules }}
            - name: galaxy-job-rules
              mountPath: /galaxy/server/lib/galaxy/jobs/rules/{{ $key }}
              subPath: {{ $key }}
            {{- end }}
            - name: galaxy-data
              mountPath: {{.Values.persistence.mountPath}}
            - name: galaxy-data
              mountPath: /galaxy/server/config/mutable/
              subPath: config
            {{- if .Values.cvmfs.enabled }}
            - name: cvmfs-gxy-main
              mountPath: {{ .Values.cvmfs.main.mountPath }}
            - name: cvmfs-gxy-data
              mountPath: {{ .Values.cvmfs.data.mountPath }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        # - name: nginx
        #   image: nginx
        #   lifecycle:
        #     preStop:
        #       exec:
        #         command: ["/usr/sbin/nginx","-s","quit"]
      volumes:
        - name: galaxy-conf-files
          {{- if .Values.useSecretConfigs }}
          secret:
            secretName: {{ template "galaxy.fullname" . }}-configs
          {{- else }}
          configMap:
            name: {{ template "galaxy.fullname" . }}-configs
          {{- end }}
          {{- range $key, $entry := .Values.initScripts -}}
          {{- if $entry.applyToWeb }}
        - name: galaxy-initscripts-{{$key}}
          {{- if $entry.useSecret }}
          secret:
            secretName: {{ include "galaxy.fullname" $ }}-{{$key}}
          {{- else }}
          configMap:
            name: {{ include "galaxy.fullname" $ }}-{{$key}}
          {{- end }}
          {{- end }}
          {{- end }}
        - name: galaxy-job-rules
          configMap:
            name: {{ template "galaxy.fullname" . }}-job-rules
        - name: galaxy-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ template "galaxy.pvcname" . }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if .Values.cvmfs.enabled }}
        - name: cvmfs-gxy-main
          persistentVolumeClaim:
            claimName: {{ template "galaxy.fullname" . }}-cvmfs-gxy-main-pvc
        - name: cvmfs-gxy-data
          persistentVolumeClaim:
            claimName: {{ template "galaxy.fullname" . }}-cvmfs-gxy-data-pvc
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
